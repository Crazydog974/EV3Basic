// ------------------------------------------ EV3 MODULE: BYTE -------------------------------------------------

subcall BYTE.NOT   // FF
{
	IN_F value
	OUT_F result
	
	DATA16 value_16
	MOVEF_16 value value_16

	XOR16 value_16 255 value_16
	AND16 value_16 255 value_16
	MOVE16_F value_16 result
}

subcall BYTE.AND_    // FFF
{
	IN_F value1
	IN_F value2
	OUT_F result

	DATA16 value1_16
	DATA16 value2_16
	MOVEF_16 value1 value1_16
	MOVEF_16 value2 value2_16

	AND16 value1_16 value2_16 value2_16
	AND16 value2_16 255 value2_16
	MOVE16_F value2_16 result
}

subcall BYTE.OR_    // FFF
{
	IN_F value1
	IN_F value2
	OUT_F result

	DATA16 value1_16
	DATA16 value2_16
	MOVEF_16 value1 value1_16
	MOVEF_16 value2 value2_16

	OR16 value1_16 value2_16 value2_16
	AND16 value2_16 255 value2_16
	MOVE16_F value2_16 result
}

subcall BYTE.XOR    // FFF
{
	IN_F value1
	IN_F value2
	OUT_F result

	DATA16 value1_16
	DATA16 value2_16
	MOVEF_16 value1 value1_16
	MOVEF_16 value2 value2_16

	XOR16 value1_16 value2_16 value2_16
	AND16 value2_16 255 value2_16
	MOVE16_F value2_16 result
}

subcall BYTE.BIT    // FFF
{
	IN_F value
	IN_F index
	OUT_F result

	DATA16 value_16
	DATA16 index_16
	DATA8 result_8
	MOVEF_16 value value_16
	MOVEF_16 index index_16

	AND16 index_16 255 index_16
	RL16 1 index_16 index_16
	AND16 index_16 value_16 value_16
	CP_NEQ16 value_16 0 result_8
	MOVE8_F result_8 result
}

subcall BYTE.SHL    // FFF
{
	IN_F value
	IN_F distance
	OUT_F result

	DATA16 value_16
	DATA16 distance_16
	MOVEF_16 value value_16
	MOVEF_16 distance distance_16

	AND16 distance_16 255 distance_16
	RL16 value_16 distance_16 value_16
	AND16 value_16 255 value_16
	MOVE16_F value_16 result
}

subcall BYTE.SHR    // FFF
{
	IN_F value
	IN_F distance
	OUT_F result

	DATA16 value_16
	DATA16 distance_16
	MOVEF_16 value value_16
	MOVEF_16 distance distance_16

	AND16 distance_16 255 distance_16
	JR_GT16 distance_16 7 outside

	RL16 1 distance_16 distance_16
	DIV16 value_16 distance_16 value_16
	MOVE16_F value_16 result
	RETURN

outside:
	MOVE16_F 0 result
}

subcall BYTE.TOHEX     // FS
{
	IN_F value
    OUT_S result 4
	
	DATA32 value_32
	MOVEF_32 value value_32

	AND32 value_32 255 value_32
	STRINGS NUMBER_FORMATTED value_32 '%02X' 3 result
}

subcall BYTE.TOBINARY     // FS
{
	IN_F value
    OUT_S result 10
	
	DATA32 value_32
	DATA32 x
	DATA32 y
	MOVEF_32 value value_32
	AND32 value_32 255 value_32

	// stretch bits so every bit is placed in an individual nibble
	RL32 value_32 12 y
	OR32 value_32 y x
	AND32 x 983055 x   // mask bits
	RL32 x 6 y
	OR32 x y x
	RL32 x 3 y
	OR32 x y x
	AND32 x 286331153 x   // mask bits

	STRINGS NUMBER_FORMATTED x '%08X' 9 result
}

subcall BYTE.TOLOGIC     // FS
{
	IN_F value
    OUT_S result 10

	JR_GTF value 0.0 delivertrue
	STRINGS DUPLICATE 'False' result
	RETURN
delivertrue:
	STRINGS DUPLICATE 'True' result
}

subcall BYTE.H     // SF
{
	IN_S a 252
    OUT_F result 

	DATA32 value
	DATA8 idx
	DATA8 char
	DATA32 digit

	MOVE32_32 0 value
	MOVE8_8 0 idx
loop:
    READ8 a idx char
	JR_EQ8 char 0 done
	JR_LT8 char 48 next
	JR_GT8 char 57 checkuppercases
	MOVE8_32 char digit
	SUB32 digit 48 digit
	JR digitfound
checkuppercases:
	JR_LT8 char 65 next
	JR_GT8 char 70 checklowercases
	MOVE8_32 char digit
	SUB32 digit 55 digit
	JR digitfound
checklowercases:
	JR_LT8 char 97 next
	JR_GT8 char 102 next
	MOVE8_32 char digit
	SUB32 digit 87 digit
digitfound:
	MUL32 value 16 value
	ADD32 value digit value
next:
	JR_GT8 idx 126 done
	ADD8 idx 1 idx
	JR loop

done:
	AND32 value 255 value
	MOVE32_F value result	
}

subcall BYTE.B     // SF
{
	IN_S a 252
    OUT_F result 

	DATA32 value
	DATA8 idx
	DATA8 char
	DATA32 digit

	MOVE32_32 0 value
	MOVE8_8 0 idx
loop:
    READ8 a idx char
	JR_EQ8 char 0 done
	JR_LT8 char 48 next
	JR_GT8 char 49 next
	MOVE8_32 char digit
	SUB32 digit 48 digit
	MUL32 value 2 value
	ADD32 value digit value
next:
	JR_GT8 idx 126 done
	ADD8 idx 1 idx
	JR loop

done:
	AND32 value 255 value
	MOVE32_F value result	
}

subcall BYTE.L     // SF
{
	IN_S a 252
    OUT_F result 

	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' a	
	JR_NEQ8 a 0 istrue	
	MOVE8_F 0 result
	RETURN
istrue:
	MOVE8_F 1 result
}
