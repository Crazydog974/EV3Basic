' Solve the classic towers of hanoi problem (heavily recursive). 
' Return: String containing all moves as pairs of pile names
F.Start = HANOI
F.Function("HANOI", "FROM:? TO:? TMP:? DISKS:1", "")
Sub HANOI
  If F.Get("DISKS") <2 then
    F.Return(F.Get("FROM") + F.Get("TO")+ ",")
  Else
    F.Set("V1", F.Call4("HANOI", F.Get("FROM"), F.Get("TMP"), F.Get("TO"), F.Get("DISKS")-1))
    F.Set("V2", F.Call2("HANOI", F.Get("FROM"), F.Get("TO")))
    F.Set("V3", F.Call4("HANOI", F.Get("TMP"), F.Get("TO"), F.Get("FROM"), F.Get("DISKS")-1))
    F.Return(F.Get("V1")+F.Get("V2")+F.Get("V3"))
  EndIf
EndSub

' Demonstrate more exotic functions features: Default parameters, default return value, 
' function consisting of multiple subprograms
F.Start = LOWEST
F.Function("LOWEST", "A:1 B:2 C:3", "LAST") 
Sub LOWEST
  If F.Get("A") < F.Get("B") Then
    LOWEST_A_LESSTHAN_B()
  Else
    LOWEST_A_GREATERTHAN_B()
  EndIf
EndSub
Sub LOWEST_A_LESSTHAN_B 
  If F.Get("A") < F.Get("C") Then
    F.Return("FIRST")
  EndIf  
EndSub
Sub LOWEST_A_GREATERTHAN_B 
  If F.Get("B") < F.Get("C") Then
    F.Return("MIDDLE")
  EndIf  
EndSub


' Main function (calls other test functions, but is not recursive itself)
F.Start = MAIN
F.Function("MAIN", "","")
Sub MAIN
  ' normal use of global variable
  MOVES = F.Call4("HANOI", "A", "B", "C", 5)
  Assert.Equal(MOVES,"AB,AC,BC,AB,CA,CB,AB,AC,BC,BA,CA,BC,AB,AC,BC,AB,CA,CB,AB,CA,BC,BA,CA,CB,AB,AC,BC,AB,CA,CB,AB,", "")
  
  '  use of local variable 
  F.Set("L", F.Call3("LOWEST", 4,7,9))
  Assert.Equal(F.Get("L"), "FIRST", "")
  Assert.Equal(F.Call1("LOWEST", 5), "MIDDLE", "")
  Assert.Equal(F.Call2("LOWEST", 5,7), "LAST", "")
  
  ' TextWindow.WriteLine("main done")
EndSub 

' fire up the MAIN itself
F.Call0("MAIN")

' use local variables in top level
F.Set("X", "some") 
Assert.Equal(F.Get("X"), "some", "")
